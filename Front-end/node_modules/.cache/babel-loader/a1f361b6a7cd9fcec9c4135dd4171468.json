{"ast":null,"code":"var _jsxFileName = \"/home/danilo/Documentos/GitHub/SPD/front-end/src/pages/question/index.js\";\nimport React, { Component } from 'react';\nimport api from '../../services/api';\nimport { Form, InputGroup, FormControl, Button, Card, ListGroup } from 'react-bootstrap';\nimport './styles.css';\nexport default class Question extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      questao: {},\n      respostas: [],\n      //respostasInfo: {},\n      usuario: {},\n      page: 1,\n      resp: \"\",\n      token: localStorage.getItem('token-do-usuario')\n    };\n\n    this.prevPage = () => {\n      const {\n        page\n      } = this.state;\n      if (page === 1) return;\n      const pageNumber = page - 1;\n      this.componentDidMount(pageNumber);\n    };\n\n    this.nextPage = () => {\n      const {\n        page,\n        respostasInfo\n      } = this.state;\n      if (page === respostasInfo.pages) return;\n      const pageNumber = page + 1;\n      this.componentDidMount(pageNumber);\n    };\n\n    this.submeterResposta = async e => {\n      e.preventDefault();\n      const {\n        resp,\n        token\n      } = this.state;\n      const header = {\n        \"authorization\": \"bearer \" + token\n      };\n      console.log(this.state);\n\n      if (!resp || token === \"\") {\n        console.error(\"Resposta invalida ou usuario nao logado\");\n      } else {\n        try {\n          await api.post(\"/respostas\", {\n            \"texto\": resp,\n            \"pergunta\": this.props.match.params.id\n          }, {\n            headers: header\n          });\n          this.componentDidMount();\n        } catch (err) {\n          alert(\"errou\");\n        }\n      }\n    };\n  }\n\n  async componentDidMount(page = 1) {\n    const {\n      id\n    } = this.props.match.params;\n    const perguntas = await api.get(`/perguntas/${id}`); //const respostas = await api.get(`/respostas/${id}?page=${page}`);\n\n    const respostas = await api.get(`/respostas/${id}`);\n    const {\n      data\n    } = respostas; //const { docs, ...respostasInfo } = responstas.data;\n\n    const {\n      usuario,\n      ...questao\n    } = perguntas.data;\n    this.setState({\n      questao,\n      usuario,\n      respostas: data,\n      page\n    }); //this.setState({question: data, page});\n  }\n\n  render() {\n    const {\n      questao,\n      respostas,\n      usuario\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"pergunta-info\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      as: \"h5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }\n    }, questao.titulo), /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }, questao.texto), /*#__PURE__*/React.createElement(Card.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 25\n      }\n    }, \"Categoria:  \", questao.categoria, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 60\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"login-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }\n    }, usuario.login, \" - \", questao.publicacao))), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"resposta-p\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, \"Respostas\"), /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ListGroup, {\n      variant: \"flush\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }, respostas.map(response => /*#__PURE__*/React.createElement(ListGroup.Item, {\n      key: response._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 33\n      }\n    }, response.texto), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"login-data\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 33\n      }\n    }, response.usuario.login, \" - \", response.publicacao))))), /*#__PURE__*/React.createElement(Form, {\n      className: \"formulario\",\n      onSubmit: this.submeterResposta,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Prepend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(InputGroup.Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 25\n      }\n    }, \"Responder pergunta\")), /*#__PURE__*/React.createElement(FormControl, {\n      as: \"textarea\",\n      \"aria-label\": \"With textarea\",\n      onChange: e => this.setState({\n        resp: e.target.value\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      className: \"botao\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, \"Submeter resposta\")));\n  }\n\n}","map":{"version":3,"sources":["/home/danilo/Documentos/GitHub/SPD/front-end/src/pages/question/index.js"],"names":["React","Component","api","Form","InputGroup","FormControl","Button","Card","ListGroup","Question","state","questao","respostas","usuario","page","resp","token","localStorage","getItem","prevPage","pageNumber","componentDidMount","nextPage","respostasInfo","pages","submeterResposta","e","preventDefault","header","console","log","error","post","props","match","params","id","headers","err","alert","perguntas","get","data","setState","render","titulo","texto","categoria","login","publicacao","map","response","_id","target","value"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport api from '../../services/api';\nimport { Form, InputGroup, FormControl, Button, Card, ListGroup } from 'react-bootstrap';\nimport './styles.css'\n\nexport default class Question extends Component{\n    state = {\n        questao: {},\n        respostas: [],\n        //respostasInfo: {},\n        usuario: {},\n        page: 1,\n        resp : \"\",\n        token: localStorage.getItem('token-do-usuario')\n    }\n    \n    async componentDidMount(page = 1){\n        const {id} = this.props.match.params;\n        \n        const perguntas = await api.get(`/perguntas/${id}`);\n        //const respostas = await api.get(`/respostas/${id}?page=${page}`);\n        const respostas = await api.get(`/respostas/${id}`);\n        const { data } = respostas;\n        \n        //const { docs, ...respostasInfo } = responstas.data;\n        const { usuario, ...questao } = perguntas.data;\n        \n        this.setState({questao, usuario, respostas: data, page});\n        //this.setState({question: data, page});\n    }\n\n    prevPage = () => {\n        const {page} = this.state;\n\n        if(page === 1) return;\n\n        const pageNumber = page - 1;\n        this.componentDidMount(pageNumber);\n    }\n\n    nextPage = () => {\n        const {page, respostasInfo} = this.state;\n\n        if(page === respostasInfo.pages) return;\n\n        const pageNumber = page + 1;\n        this.componentDidMount(pageNumber);\n    }\n\n    submeterResposta = async e => {\n        e.preventDefault();\n        const {resp, token} = this.state;\n        const header={\"authorization\": \"bearer \" + token}\n        console.log(this.state);\n        if(!resp || token === \"\"){\n            console.error(\"Resposta invalida ou usuario nao logado\");\n        }else{\n            try{\n                await api.post(\"/respostas\", {\"texto\": resp, \"pergunta\": this.props.match.params.id}, {headers: header});\n                this.componentDidMount();\n            }catch(err){\n                alert(\"errou\");\n            }\n        }\n\n    }\n\n    render(){\n        const {questao, respostas, usuario} = this.state;\n        return(\n            <div className=\"pergunta-info\">\n                <Card>\n                    <Card.Header as=\"h5\">{questao.titulo}</Card.Header>\n                    <Card.Body>\n                        <Card.Title>{questao.texto}</Card.Title>\n                        <Card.Text>\n                            Categoria:  {questao.categoria}<br></br>\n                        </Card.Text>\n                        <div className=\"login-data\">{usuario.login} - {questao.publicacao}</div>\n                    </Card.Body>\n                </Card>\n                <hr />\n                <p className=\"resposta-p\">Respostas</p>\n                <Card>\n                    <ListGroup variant=\"flush\">\n                        {respostas.map(response => (\n                            <ListGroup.Item key={response._id}>\n                                <p>{response.texto}</p>\n                                <p className=\"login-data\">{response.usuario.login} - {response.publicacao}</p>\n                            </ListGroup.Item>\n                        ))}\n                    </ListGroup>\n                </Card>\n                {/* <div className=\"botoes\">\n                    <Button onClick={this.prevPage}>Anterior</Button>\n                    <Button onClick={this.nextPage}>Proxima</Button>\n                </div> */}\n                <Form className=\"formulario\" onSubmit={this.submeterResposta}>\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                        <InputGroup.Text>Responder pergunta</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <FormControl as=\"textarea\" aria-label=\"With textarea\" onChange={e => this.setState(({resp: e.target.value}))}/>\n                    </InputGroup>\n                    <Button className=\"botao\" type=\"submit\">Submeter resposta</Button>\n                </Form>\n            </div>\n          \n        );\n    }\n}\n\n\n               "]},"metadata":{},"sourceType":"module"}